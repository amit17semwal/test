package sample.java8.practice;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

interface Formula {
	double calculate(int a);

	default double sqrt(int a) {
		return Math.sqrt(a);
	}
}

@FunctionalInterface
interface Converter<F, T> {

	F convert(T a);
}

public class SimpleFeaturs {
	public static void main(String[] args) {
		Formula f = new Formula() {
			@Override
			public double calculate(int a) {
				return 0;
			}
		};
		int num = 1;
		Converter<Integer, Integer> stringConverter = (from) -> {
			return from + num;
		};

		// stringConverter.convert(2);
		System.out.println(stringConverter.convert(2));
		List<String> stringCollection = new ArrayList<>();
		stringCollection.add("ddd2");
		stringCollection.add("aaa2");
		stringCollection.add("bbb1");
		stringCollection.add("aaa1");
		stringCollection.add("bbb3");
		stringCollection.add("ccc");
		stringCollection.add("bbb2");
		stringCollection.add("ddd1");

		stringCollection.stream().filter((s) -> s.startsWith("a")).map((s) -> s.toUpperCase())
				.forEach(System.out::println);
		System.out.println("-----------");
		stringCollection.stream().filter((s) -> s.startsWith("a")).sorted().forEach(System.out::println);

		Optional<String> reduced = stringCollection.stream().sorted().reduce((s1, s2) -> s1 + "#" + s2);
		System.out.println("-----------");
		System.out.println(reduced.get());
		
		Map<Integer, String> map = new HashMap<>();

		for (int i = 0; i < 10; i++) {
		    map.putIfAbsent(i, "val" + i);
		}

		//int num =10;
		map.forEach((id, val) -> System.out.println(val));
		map.computeIfPresent(3, (num1, val) -> val + num1);
		map.get(3);             // val33

		map.computeIfPresent(9, (num1, val) -> null);
		map.containsKey(9);     // false

		map.computeIfAbsent(23, num1 -> "val" + num1);
		map.containsKey(23);    // true

		map.computeIfAbsent(3, num1 -> "bam");
		map.get(3);             // val33

		Boolean.TRUE.equals(null);
	}

}
